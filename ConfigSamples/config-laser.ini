# for Prime Alpha
[general]
grbl_mode = true
config-override = false
rpi_port_enable = false
rpi_baudrate = 115200

[motion control]
default_feed_rate = 2400 # Default speed (mm/minute) for G1/G2/G3 moves
default_seek_rate = 2400 # Default speed (mm/minute) for G0 moves
mm_per_arc_segment = 0.0 # Fixed length for line segments that divide arcs, 0 to disable
mm_max_arc_error = 0.01 # The maximum error for line segments that divide arcs 0 to disable
arc_correction = 5
default_acceleration = 1000.0 # default acceleration in mm/sec²
arm_solution = cartesian
x_axis_max_speed = 2400 # Maximum speed in mm/min
y_axis_max_speed = 2400 # Maximum speed in mm/min
z_axis_max_speed = 2400 # Maximum speed in mm/min
#max_speed = 0           # Overall Maximum speed in mm/min (0 disables it)
#save_g92 = false       # set to true to save G92 with M500
#save_wcs = false       # set to true to save WCS (G54 etc) with M500

[planner]
junction_deviation = 0.05
#z_junction_deviation = 0.0
minimum_planner_speed = 0
planner_queue_size = 32

[actuator]
alpha.steps_per_mm = 800       # Steps per mm for alpha ( X ) stepper
alpha.step_pin = pe.14         # Pin for alpha stepper step signal
alpha.dir_pin = pb.0           # Pin for alpha stepper direction, add '!' to reverse direction
alpha.max_rate = 2400          # Maximum rate in mm/min
alpha.microsteps = 32          # sets micro stepping (default 32)
#alpha.external_driver = true  # sets this as an external driver, default is false, except for epsilon and zeta

beta.steps_per_mm = 800        # Steps per mm for beta ( Y ) stepper
beta.step_pin = pe.9           # Pin for beta stepper step signal
beta.dir_pin = pe.11           # Pin for beta stepper direction, add '!' to reverse direction
beta.max_rate = 2400           # Maxmimum rate in mm/min
beta.microsteps = 32           # sets micro stepping (default 32)

gamma.steps_per_mm = 800    # Steps per mm for gamma ( Z ) stepper
gamma.step_pin = pe.8       # Pin for gamma stepper step signal
gamma.dir_pin = p7.1        # Pin for gamma stepper direction, add '!' to reverse direction
gamma.max_rate = 2400       # Maximum rate in mm/min
gamma.acceleration = 500    # overrides the default acceleration for this axis
gamma.microsteps = 32       # sets micro stepping (default 32)

# Delta is first extruder, we set common stuff here instead of in extruder section
#delta.steps_per_mm = 700       # Steps per mm for extruder stepper
#delta.step_pin = p6.11         # Pin for extruder step signal
#delta.dir_pin = p6.10          # Pin for extruder dir signal ( add '!' to reverse direction )
#delta.acceleration = 500       # Acceleration for the stepper motor mm/sec²
#delta.max_rate = 3000.0        # Maximum rate in mm/min
#delta.microsteps = 32          # sets micro stepping (default 32)

common.check_driver_errors = true     # set to true means the driver (tmc2660) error bits are checked
common.halt_on_driver_alarm = false   # if set to true means ON_HALT is entered on any error bits being set

[tmc2660]
# common settings for all tmc2660 drivers
common.max_current = 2800      # max current in milliamps

# settings specific to each tmc2660 driver instance
# direct register setting... order and codes are chip dependent, values are in 32 bit Hex
# NOTE that the microsteps and current settings will be over written by the settings in current control and actuator
# M911 prints the current settings out in this format for copy/paste
#alpha.reg 00204,981C0,A0000,C000E,E0060

alpha.spi_cs_pin = gpio3_8    # sets the CS pin for the TMC2660 SPI
beta.spi_cs_pin = gpio7_12    # sets the CS pin for the TMC2660 SPI
gamma.spi_cs_pin = gpio7_7    # sets the CS pin for the TMC2660 SPI
delta.spi_cs_pin =  gpio2_8   # sets the CS pin for the TMC2660 SPI

[current control]
alpha.current  = 0.7    # X stepper motor current Amps
beta.current   = 0.7    # Y stepper motor current
gamma.current  = 0.7    # Z stepper motor current
#delta.current  = 1.5    # First extruder stepper motor current

[temperature control]
# board temperature, no controller, readonly
board.enable = true                # Whether to activate this module at all.
board.thermistor_pin = ADC0_6      # Pin for the thermistor to read
board.designator = P               # Designator letter for this module
board.beta = 4334

[switch]
# main power/motor power
psu.enable = true             # Enable this switch
psu.input_on_command = M2     # Command that will turn this switch on
psu.input_off_command = M5    # Command that will turn this switch off
psu.output_pin = gpio7_5o!    # Pin this switch controls (SSR1 requires open drain and inverting)
psu.output_type = digital     # Digital means this is just an on or off pin

# laser power
lpsu.enable = true             # Enable this switch
lpsu.input_on_command = M2     # Command that will turn this switch on
lpsu.input_off_command = M5    # Command that will turn this switch off
lpsu.output_pin = p6.2         # Pin this switch controls mosfet 1
lpsu.output_type = digital     # Digital means this is just an on or off pin

[kill button]
enable = false         # Set to true to enable a kill button
pin = gpio4_4          # Kill button pin. on G2 p3
toggle_enable = false  # set to true to make it a toggle button (like an estop)
unkill_enable = true   # enable kill button hold for 2 seconds does unkill

[pwm]
frequency=10000        # PWM frequency
[laser]
enable = true # Whether to activate the laser module at all
pwm_pin = p4.2 # This pin will be PWMed to control the laser. on G6 p3

#inverted_pwm = false # set to true to invert the pwm
#ttl_pin = P1.30  # This pin turns on when the laser turns on, and off when the laser turns off.
#maximum_power = 1.0 # This is the maximum duty cycle that will be applied to the laser
#minimum_power = 0.0 # This is a value just below the minimum duty cycle that keeps the laser active without actually burning.
#default_power = 0.8 # This is the default laser power that will be used for cuts if a power has not been specified.  The value is a scale between the maximum and minimum power levels specified above

[endstops]
common.debounce_ms = 0         # debounce time in ms (actually 10ms min)
#common.is_delta = true
#common.homing_order = XYZ     # order in which axis homes (if defined)

minx.enable = true             # enable an endstop
minx.pin = p4.0                # pin
minx.homing_direction = home_to_min      # direction it moves to the endstop
minx.homing_position = 0                # the cartesian coordinate this is set to when it homes
minx.axis = X                # the axis designator
minx.max_travel = 500              # the maximum travel in mm before it times out
minx.fast_rate = 30               # fast homing rate in mm/sec
minx.slow_rate = 5               # slow homing rate in mm/sec
minx.retract = 5                # bounce off endstop in mm
minx.limit_enable = false        # enable hard limit

miny.enable = true                  # enable an endstop
miny.pin = pf.9                     # pin
miny.homing_direction = home_to_min # direction it moves to the endstop
miny.homing_position = 0            # the cartesian coordinate this is set to when it homes
miny.axis = Y                       # the axis designator
miny.max_travel = 500               # the maximum travel in mm before it times out
miny.fast_rate = 30                 # fast homing rate in mm/sec
miny.slow_rate = 5                  # slow homing rate in mm/sec
miny.retract = 5                    # bounce off endstop in mm
miny.limit_enable = false            # enable hard limits

minz.enable = true                  # enable an endstop
minz.pin = pf.8                     # pin
minz.homing_direction = home_to_min # direction it moves to the endstop
minz.homing_position = 0            # the cartesian coordinate this is set to when it homes
minz.axis = Z                       # the axis designator
minz.max_travel = 500               # the maximum travel in mm before it times out
minz.fast_rate = 30                 # fast homing rate in mm/sec
minz.slow_rate = 5                  # slow homing rate in mm/sec
minz.retract = 5                    # bounce off endstop in mm
minz.limit_enable = false            # enable hard limits

#maxx.pin = pb.4
#maxy.pin = pb.5
#maxz.pin = pb.2

#probe.pin = pb.3


[voltage monitor]
vmotor = ADC0_7  # monitors motor voltage (Vbb) needed as drivers cannot be setup until this is on
vfet = ADC0_5    # monitors fet voltage

[network]
enable = true
shell_enable = true
ftp_enable = true
webserver_enable = true
ip_address = auto              # uses dhcp to get ip address (default)
#ip_address = 192.168.1.101
#ip_gateway = 192.168.1.254
#ip_mask = 255.255.255.0


